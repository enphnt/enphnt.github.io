{"version":3,"file":"component---src-templates-tags-js-617c931cad4334164c50.js","mappings":"sKAIA,MAAMA,EAAc,CAAC,YAAa,YAAa,aAAc,YAAa,uBAAwB,aAAc,YAAa,cAAe,gBAAiB,gBAC7J,IAAIC,EAAa,EAkFjB,IAhFwB,IAAqF,IAAlFC,MAAM,GAAEC,EAAIC,aAAa,UAAEC,EAAS,KAAEC,EAAI,MAAEC,EAAK,KAAEC,EAAI,KAAEC,GAAM,QAAEC,IAAW,EACrG,MAAMC,GAAQC,EAAAA,EAAAA,GAASP,GACjBQ,EAAS,CACbC,QAAS,CACPC,QAAS,OACTC,oBAAqB,qCACrBC,QAAS,MACTC,SAAU,MACVC,QAAS,WAEXC,IAAK,CACHD,QAAS,EACTE,OAAQ,MACRC,gBAAiB,UACjBC,MAAO,UACPC,aAAc,MACdC,eAAgB,QAElBC,eAAgB,CACdX,QAAS,OACTY,SAAU,QAEZC,QAAS,CACPC,UAAW,EACXC,SAAU,QACVC,WAAY,IACZC,mBAAoB,YACpBC,oBAAqB,QACrBC,oBAAqBlC,EAAY,EAAIC,IAAeD,EAAYmC,QAChEC,wBAAyB,GAE3BC,iBAAkB,CAChBhB,OAAQ,cACRiB,YAAa,UAEfC,KAAM,CACJC,cAAe,UAEjBC,GAAI,CACFlB,MAAOvB,EAAYC,IAAeD,EAAYmC,QAC9Cd,OAAQ,IAIZ,OACE,2BACE,sBAAIqB,MAAO7B,EAAO4B,KAClB,2BAASC,MAAO7B,EAAOC,QAAS6B,IAAKxC,GAEnC,uBAAKuC,MAAO7B,EAAOwB,kBACjB,gBAAC,EAAAO,KAAI,CAACzC,GAAG,cAAc,aAAYG,EAAMqC,IAAKrC,EAAMuC,GAAE,SAAWvC,EAAI,KACnE,gBAAC,EAAAwC,EAAW,CACVC,MAAOpC,EACPqC,IAAG,iBAAmBzC,MAK5B,uBAAKmC,MAAO7B,EAAO0B,MACjB,gBAAC,EAAAK,KAAI,CAAC,aAAYtC,EAAMqC,IAAKrC,EAAMuC,GAAE,SAAWvC,EAAI,IAAKoC,MAAO7B,EAAOe,SACpErB,GAGH,0BAAKC,GACL,yBAAIE,GACJ,uBAAKgC,MAAO7B,EAAOa,gBAEfjB,EAAKwC,KAAI7B,GACP,gBAAC,EAAAwB,KAAI,CAACD,IAAKvB,EAAKyB,GAAE,SAAWzB,EAAI8B,QAAQ,KAAM,KAAI,IAAKR,MAAO7B,EAAOO,KACnEA,QAOT,C,mFCnDV,UA1Ba,IAA4B,IAA3B,YAAE+B,EAAW,KAAEC,GAAM,EACjC,MAAM,IAAEhC,GAAQ+B,GACV,MAAEE,EAAK,WAAEC,GAAeF,EAAKG,OAC7BC,EAAS,SACJF,EAAU,SAAuB,IAAfA,EAAmB,GAAK,KAAG,iBAAiBlC,EAAG,IACtEqC,EAAU,IACd,uBAAKf,MAAO,CAAEgB,UAAW,SAAUrC,OAAQ,KACzC,gBAAC,EAAAuB,KAAI,CAACC,GAAG,UAAS,kBAEtB,OACE,gBAAC,IAAM,KACL,uBAAKH,MAAO,CAAE3B,QAAS,OAAQ4C,cAAe,SAAUC,WAAY,WAClE,0BAAI,SAAOxC,EAAI,KACf,0BAAKoC,GACL,gBAACC,EAAO,OAGRJ,EAAMJ,KAAI,QAAC,KAAE/C,GAAM,SAAK,gBAAC,IAAe,CAACyC,IAAKzC,EAAKC,GAAID,KAAMA,GAAQ,IAEvE,2BACA,gBAACuD,EAAO,MACR,gBAAC,IAAG,CAAClD,MAAK,iBAAmBa,EAAG,MACzB,C","sources":["webpack://nathan-phennel-website/./src/components/article-list-item.js","webpack://nathan-phennel-website/./src/templates/tags.js"],"sourcesContent":["import * as React from 'react';\nimport { Link } from 'gatsby';\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image';\n\nconst lightColors = [\"lightgray\", \"lightblue\", \"lightcoral\", \"lightcyan\", \"lightgoldenrodyellow\", \"lightgreen\", \"lightpink\", \"lightsalmon\", \"lightseagreen\", \"lightskyblue\"];\nlet colorIndex = 0;\n\nconst ArticleListItem = ({ node: { id, frontmatter: { thumbnail, slug, title, date, tags }, excerpt } }) => {\n  const thumb = getImage(thumbnail);\n  const styles = {\n    article: {\n      display: \"grid\",\n      gridTemplateColumns: \"repeat(auto-fit, minmax(9em, 1fr))\",\n      gridGap: \"1em\",\n      maxWidth: \"99%\",\n      padding: \"1em 1em\",\n    },\n    tag: {\n      padding: 4,\n      margin: \"4px\",\n      backgroundColor: \"#e0e0e0\",\n      color: \"inherit\",\n      borderRadius: \"4px\",\n      textDecoration: \"none\",\n    },\n    blogFooterTags: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n    },\n    heading: {\n      marginTop: 0,\n      fontSize: \"1.6em\",\n      fontWeight: 600,\n      textDecorationLine: \"underline\",\n      textDecorationStyle: \"solid\",\n      textDecorationColor: lightColors[1 + colorIndex++ % lightColors.length],\n      textDecorationThickness: 1,\n    },\n    thumbnailWrapper: {\n      margin: \"0.5em 0 0 0\",\n      justifySelf: \"center\"\n    },\n    info: {\n      gridColumnEnd: \"span 3\"\n    },\n    hr: {\n      color: lightColors[colorIndex++ % lightColors.length],\n      margin: 0,\n    }\n  };\n\n  return (\n    <div>\n      <hr style={styles.hr} />\n      <article style={styles.article} key={id}>\n\n        <div style={styles.thumbnailWrapper}>\n          <Link id=\"nohighlight\" aria-label={slug} key={slug} to={`/blog/${slug}/`}>\n            <GatsbyImage\n              image={thumb}\n              alt={`Thumbnail for ${title}`}\n            />\n          </Link>\n        </div>\n\n        <div style={styles.info}>\n          <Link aria-label={slug} key={slug} to={`/blog/${slug}/`} style={styles.heading}>\n            {title}\n          </Link >\n\n          <h5>{date}</h5>\n          <p>{excerpt}</p>\n          <div style={styles.blogFooterTags}>\n            {\n              tags.map(tag => (\n                <Link key={tag} to={`/tags/${tag.replace(/ /g, \"-\")}/`} style={styles.tag}>\n                  {tag}\n                </Link>\n              ))\n            }\n          </div>\n        </div>\n      </article>\n    </div>\n  );\n};\n\nexport default ArticleListItem;","import React from \"react\";\nimport { Link, graphql } from \"gatsby\";\nimport Layout from \"../components/layout\";\nimport Seo from \"../components/seo\";\nimport ArticleListItem from \"../components/article-list-item\";\n\nconst Tags = ({ pageContext, data }) => {\n  const { tag } = pageContext;\n  const { edges, totalCount } = data.allMdx;\n  const tagHeader =\n    `Found ${totalCount} post${totalCount === 1 ? \"\" : \"s\"} tagged with \"${tag}\"`;\n  const AllTags = () =>\n    <div style={{ textAlign: \"center\", margin: 16 }}>\n      <Link to=\"/tags/\">Show all tags</Link>\n    </div>;\n  return (\n    <Layout>\n      <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\n        <h1>Tag: \"{tag}\"</h1>\n        <h2>{tagHeader}</h2>\n        <AllTags />\n      </div>\n      {\n        edges.map(({ node }) => <ArticleListItem key={node.id} node={node} />)\n      }\n      <br />\n      <AllTags />\n      <Seo title={`Tagged with: '${tag}'`} />\n    </Layout>\n  );\n};\n\nexport default Tags;\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allMdx(\n      limit: 2000\n      sort: { frontmatter: { date: DESC }}\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {excerpt(pruneLength: 180)\n          frontmatter {\n            date(formatString: \"MMMM D, YYYY\")\n            title\n            slug\n            tags\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData\n              }\n            }\n          }\n          internal {\n            contentFilePath\n          }\n        }\n      }\n    }\n  }\n`;"],"names":["lightColors","colorIndex","node","id","frontmatter","thumbnail","slug","title","date","tags","excerpt","thumb","getImage","styles","article","display","gridTemplateColumns","gridGap","maxWidth","padding","tag","margin","backgroundColor","color","borderRadius","textDecoration","blogFooterTags","flexWrap","heading","marginTop","fontSize","fontWeight","textDecorationLine","textDecorationStyle","textDecorationColor","length","textDecorationThickness","thumbnailWrapper","justifySelf","info","gridColumnEnd","hr","style","key","Link","to","G","image","alt","map","replace","pageContext","data","edges","totalCount","allMdx","tagHeader","AllTags","textAlign","flexDirection","alignItems"],"sourceRoot":""}